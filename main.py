import telebot
import sqlite3
import time
import threading
from telebot import types
from datetime import datetime
from dateutil import parser

bot = telebot.TeleBot('6636340841:AAGT6Hz_zaM3YbZQOby2iZ3oQGJvKJ_sH7c')
note_name = None
note_text = None
user_id = None

def send_commands_keyboard(bot, chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/add'), types.KeyboardButton('/delete'), types.KeyboardButton('/edit'))
    keyboard.add(types.KeyboardButton('/notes'), types.KeyboardButton('/rule'), types.KeyboardButton('/help'))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)

def check_notes_and_notify():
    while True:
        time.sleep(1)

        current_time = datetime.now()
        conn = sqlite3.connect('notes.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM notes WHERE time <= ?", (current_time,))
        notes = cursor.fetchall()

        for note in notes:
            user_id, notes_name, notes_text, _ = note
            bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notes_name}\n{notes_text}")

            cursor.execute("DELETE FROM notes WHERE user_id = ? AND notes_name = ?", (user_id, notes_name))
            conn.commit()

        cursor.close()
        conn.close()

timer_thread = threading.Thread(target=check_notes_and_notify)
timer_thread.start()

@bot.message_handler(commands = ['start'])
def main(message):
    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS notes (user_id INTEGER, notes_name TEXT PRIMARY KEY, notes_text TEXT, time DATETIME)')
    conn.commit()
    cursor.close()
    conn.close()

    if message.from_user.first_name == None:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.last_name}. –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞–µ–Ω –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—è –∏—Ö –≤–∞–º.')
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help')
    elif message.from_user.last_name == None:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞–µ–Ω –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—è –∏—Ö –≤–∞–º.')
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help')
    else:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}. –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞–µ–Ω –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—è –∏—Ö –≤–∞–º.')
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help')
    send_commands_keyboard(bot, message.chat.id)


@bot.message_handler(commands = ['help'])
def mai(message):
    bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥—ã:\n/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É \n/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏\n/notes - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É\n/rule - –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±–æ—Ç–∞')
    send_commands_keyboard(bot, message.chat.id)


@bot.message_handler(commands=['add'])
def add(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏')
    bot.register_next_step_handler(message, noteName)
def noteName(message):
    global note_name
    global user_id
    note_name = message.text
    user_id = message.from_user.id
    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM notes WHERE user_id = ? AND notes_name = ?", (user_id, note_name))
    existing_note = cursor.fetchone()
    cursor.close()
    conn.close()
    if existing_note:
        bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–º–µ—Ç–∫–∏.")
        add(message)
    else:
        try:
            if ' ' in note_name:
                raise ValueError('–ò–º—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞!')
            bot.send_message(message.chat.id, '–ò–º—è –∑–∞–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ')
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏')
            bot.register_next_step_handler(message, noteText)
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {str(e)} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            add(message)
def noteText(message):
    global note_text
    note_text = ' '.join(message.text.strip().split())
    bot.send_message(message.chat.id, '–ó–∞–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞')
    current_datetime = datetime.now()
    formatted_datetime = current_datetime.strftime("%d.%m.%Y %H:%M")
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã {formatted_datetime}')
    bot.register_next_step_handler(message, date)
def date(message):
    current_datetime = datetime.now()
    formatted_datetime = current_datetime.strftime("%d.%m.%Y %H:%M")
    try:
        user_datetime = parser.parse(message.text, dayfirst=True, yearfirst=False)
        if user_datetime <= current_datetime:
            raise OverflowError
        conn = sqlite3.connect('notes.sql')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO notes(user_id, notes_name, notes_text, time) VALUES (?, ?, ?, ?)", (user_id, note_name, note_text, user_datetime))
        conn.commit()
        cursor.close()
        conn.close()
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üëå")
        send_commands_keyboard(bot, message.chat.id)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ üßê")
        bot.send_message(message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã {formatted_datetime}')
        bot.register_next_step_handler(message, date)
    except OverflowError:
        bot.send_message(message.chat.id, '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏')
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã {formatted_datetime}')
        bot.register_next_step_handler(message, date)


@bot.message_handler(commands=['reply'])
def reply(message):
    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute('select * from notes')
    users = cursor.fetchall()
    info = ''

    for el in users:
        if len(el) >= 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–æ—Ä—Ç–µ–∂–∞ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 —ç–ª–µ–º–µ–Ω—Ç–∞
            info += f'if: {el[0]}, –∏–º—è –∑–∞–º–µ—Ç–∫–∏: {el[1]}, —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: {el[2]}, –¥–∞—Ç–∞: {el[3]}\n'
        else:
            info += '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ\n'

    cursor.close()
    conn.close()

    if info:
        bot.send_message(message.chat.id, info)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@bot.message_handler(commands=['delete'])
def delete(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM notes WHERE user_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    if count == 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è üßê")
        send_commands_keyboard(bot, message.chat.id)
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    bot.register_next_step_handler(message, delete_note)
def delete_note(message):
    try:
        user_id = message.from_user.id
        note_name = message.text

        conn = sqlite3.connect('notes.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM notes WHERE user_id = ? AND notes_name = ?", (user_id, note_name))
        existing_note = cursor.fetchone()

        if existing_note:
            # –ó–∞–º–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM notes WHERE user_id = ? AND notes_name = ?", (user_id, note_name))
            conn.commit()
            bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üëå")
            send_commands_keyboard(bot, message.chat.id)
        else:
           raise Exception
    except Exception:
        bot.send_message(message.chat.id,"–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.\n–ò–º—è –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞!")
        delete(message)
    finally:
        cursor.close()
        conn.close()
@bot.message_handler(commands=['edit'])
def startEdit(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM notes WHERE user_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    if count == 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üßê")
        send_commands_keyboard(bot, message.chat.id)
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
    bot.register_next_step_handler(message, edit)
def edit(message):
    try:
        note_name = message.text
        user_id = message.from_user.id
        conn = sqlite3.connect('notes.sql')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM notes WHERE user_id = ? AND notes_name = ?", (user_id, note_name))
        existing_note = cursor.fetchone()
        cursor.close()
        conn.close()

        if existing_note:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:")
            bot.register_next_step_handler(message, update_note, user_id, note_name)
        else:
            raise Exception
    except Exception:
        bot.send_message(message.chat.id,"–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.\n–ò–º—è –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞!")
        startEdit(message)
def update_note(message, user_id, note_name):
    new_text = ' '.join(message.text.strip().split())

    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute("UPDATE notes SET notes_text = ? WHERE user_id = ? AND notes_name = ?",(new_text, user_id, note_name))
    conn.commit()
    cursor.close()
    conn.close()

    bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ üëå")
    send_commands_keyboard(bot, message.chat.id)

@bot.message_handler(commands=['notes'])
def notes(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute("SELECT notes_name FROM notes WHERE user_id = ?", (user_id,))
    user_notes = cursor.fetchall()
    cursor.close()
    conn.close()

    if not user_notes:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞–º–µ—Ç–∫–∏! üßê")
        send_commands_keyboard(bot, message.chat.id)
        return

    notes_list = "\n".join(f"{index + 1} - {note[0]}" for index, note in enumerate(user_notes))
    bot.send_message(message.chat.id, f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_list}")
    keyboard = types.InlineKeyboardMarkup(row_width=1)


    for index, note in enumerate(user_notes):
        button_text = str(index + 1)
        callback_data = f"show_note_{index + 1}"
        keyboard.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–µ —Ç–µ–∫—Å—Ç:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_note_'))
def process_note_selection(call):
    user_id = call.from_user.id
    selected_index = int(call.data.split('_')[2]) - 1

    conn = sqlite3.connect('notes.sql')
    cursor = conn.cursor()
    cursor.execute("SELECT notes_name, notes_text FROM notes WHERE user_id = ?", (user_id,))
    user_notes = cursor.fetchall()
    cursor.close()
    conn.close()

    if 0 <= selected_index < len(user_notes):
        selected_note_name, selected_note_text = user_notes[selected_index]
        bot.send_message(call.message.chat.id, f"–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ {selected_note_name}:\n{selected_note_text}")
    send_commands_keyboard(bot, call.message.chat.id)


@bot.message_handler(commands=['rule'])
def rule(message):
    bot.send_message(message.chat.id, '–°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ–≥–¥–∞ –≤—ã—Å–∫–æ—á–∏–ª–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏, –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º —É–¥–∞–ª—è–µ—Ç—Å—è!\n–ñ–µ–ª–∞—é –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º üòâ')
    send_commands_keyboard(bot, message.chat.id)
@bot.message_handler()
def info(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help')
    send_commands_keyboard(bot, message.chat.id)


bot.polling(none_stop=True)